def SET_VARIABLE = "Jenkins File 변수 설정"
def SONARQUBE_ANALYSIS = "소나큐브 Analysis 확인"
def SONARQUBE_QUALITY_GATE = "소나큐브 Quality Gate 확인"

pipeline {
    agent any
    environment {
        WEBHOOK_URL = credentials("Total-Back-Office-BE-Discord-Webhook")
    }

    stages {
        stage('Project Build 작업') {
            steps {
                sh '''
                    echo 'Project Build 작업을 시작 합니다!'
                    echo 'Gradle Version : '
                    ./gradle -v
                    ./gradlew clean build --stacktrace
                '''
            }

            post {
                success {
                    discordSend description: "Project Build 작업 성공 하였어요. 😀",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }

                failure {
                    discordSend description: "Project Build 작업 실패 하였어요. 😢",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }
            } // Discord Send Post 끝
        } // stage('Project Build 작업') 끝

        stage(SET_VARIABLE) {
            steps {
                script {
                    // 구동 환경 설정 (삼항 연산자로 브런치 이름이 master라면 prod 환경이고, 아니면 dev 환경
                    DRIVE_ENV = env.BRANCH_NAME.equals("master") ? "prod" : "dev"

                    // 소나큐브 설정
                    SONARQUBE_SERVER_NAME = 'SonarQube_BackEnd'
//                    SONARQUBE_PR_SERVER_NAME = "Giggal_BE_SonarBot"
                    SONARQUBE_CREDENTIAL_ID = "Total-Back-Office-BE-SonarQube"

                    // TEST Coverage Report Path
                    JUNIT_REPORT_PATH = "build/test-results/test"
                    JACOCO_REPORT_PATH = "build/jacoco/jacoco.xml"
                    CHECKSTYLE_REPORT_PATH = "build/reports/checkstyle-output/checkstyle-report.xml"
                }
            }
        } // stage(SET_VARIABLE) 끝

        stage(SONARQUBE_ANALYSIS) {
            when {
                branch pattern: "(develop|master)", comparator: "REGEXP"
            }

            steps {
                script {
                    def scannerHome = tool 'SonarQube-Scanner';
                    withSonarQubeEnv(credentialsId: SONARQUBE_CREDENTIAL_ID, installationName: SONARQUBE_SERVER_NAME) {
                        sh "${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=BE-total-back-office \
                        -Dsonar.projectName=BE-total-back-office \
                        -Dsonar.branch.name=master \
                        -Dsonar.language=java \
                        -Dsonar.java.source=1.8 \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.test=src/test/java \
                        -Dsonar.test.inclusion=**/*Test.java \
                        -Dsonar.issuesReport.console.enable=true \
                        -Dsonar.junit.reportPaths=${JUNIT_REPORT_PATH} \
                        -Dsonar.java.binaries=build/classes \
                        -Dsonar.java.coveragePlugin=jacoco \
                        -Dsonar.coverage.jacoco.xmlReportPaths=${JACOCO_REPORT_PATH} \
                        -Dsonar.java.libraries.empty=true \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.java.checkstyle.reportPaths=${CHECKSTYLE_REPORT_PATH} \
                        -Dsonar.exclusions=**/dto/**,**/exception/**,**/constant/**,**/SpringInitProjectApplication.java,**/WebRestController.java,**/FileUploadYaml.java \
                        "
                    }
                }
            }

            post {
                success {
                    discordSend description: "소나큐브 Scan 작업 성공 하였어요. 😀",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }

                failure {
                    discordSend description: "소나큐브 Scan 작업 실패 하였어요. 😢",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }
            } // Discord Send Post 끝
        } // stage(SONARQUBE_ANALYSIS) 끝

        stage(SONARQUBE_QUALITY_GATE) {
            when {
                branch pattern: "(develop|master)", comparator: "REGEXP"
            }

            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
//                    script {
//                        echo "소나큐브 Quality Gate 검사가 시작 되었어요!"
//                        def sonarQubeQualityGate = waitForQualityGate()
//                        def qualityGateStatus = sonarQubeQualityGate.status
//                        echo "Quality Gate 상태: ${qualityGateStatus}"
//
//                        if (qualityGateStatus != 'OK') {
//                            echo "Quality Gate 검증 상태: ${qualityGateStatus}"
//                            error "Quality Gate 검증에 실패 하였어요 😭: ${qualityGateStatus}"
//
//                        } else {
//                            echo "Quality Gate 검증에 성공 하였어요 😀: ${qualityGateStatus}"
//                        }
//
//                        echo "Quality Gate 검증을 모두 완료 하였어요 😎"
//                    }
                }
            }

            post {
                success {
                    discordSend description: "소나큐브 Quality Gate 작업 성공 하였어요. 😀",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }

                failure {
                    discordSend description: "소나큐브 Quality Gate 작업 실패 하였어요. 😢",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }
            } // Discord Send Post 끝
        } // stage(SONARQUBE_QUALITY_GATE) 끝

        stage('Jenkins CI/CD 작업 완료') {
            steps {
                sh 'echo "Jenkins CI/CD 작업이 완료 되었어요. 😎"'
            }

            post {
                success {
                    discordSend description: "Build 성공 하였어요. 😀",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }

                failure {
                    discordSend description: "Build 실패 하였어요. 😢",
                            footer: "Jenkins CI/CD Trigger Alarm",
                            link: env.BUILD_URL, result: currentBuild.currentResult,
                            title: "Jenkins CI/CD Trigger Discord를 통해 받기 시험 중 입니다.",
                            webhookURL: env.WEBHOOK_URL
                }
            } // Discord Send Post 끝
        } // stage('Jenkins CI/CD 작업 완료') 끝
    } // stages 끝
}