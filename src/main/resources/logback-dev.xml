<?xml version="1.0" encoding="UTF-8" ?>
<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">
    <!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.-->
    <springProfile name="local">
        <property resource="application-local-logback.yml"/>
        <property resource="application-local-environment.yml"/>
    </springProfile>
    <springProfile name="dev">
        <property resource="application-dev-logback.yml"/>
        <property resource="application-dev-environment.yml"/>
    </springProfile>
    <springProfile name="prod">
        <property resource="application-prod-logback.yml"/>
        <property resource="application-prod-environment.yml"/>
    </springProfile>
    <!-- application-dev-logback.yml에서 정보를 가져옴 -->
    <springProperty name="DISCORD_WEBHOOK_URI" source="logging.discord.webhook-uri"/>
    <property name="LOG_ROOT_PATH" value="log"/>
    <!-- application-dev-port.yml에서 정보를 가져옴 -->
    <springProperty name="SERVER_NAME" source="server.name"/>
    <springProperty name="ENVIRONMENT" source="server.environment"/>
    <springProperty name="PORT" source="server.port"/>
    <property name="LOG_PATH_NAME" value="${LOG_ROOT_PATH}/${SERVER_NAME}/${ENVIRONMENT}-${PORT}/%d{yyyy-MM-dd}"/>
    <!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.-->
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
    <!-- err log file name -->
    <property name="ERR_LOG_FILE_NAME" value="Error"/>
    <!-- err log file name -->
    <property name="LOG_FILE_NAME" value="Info"/>
    <!-- pattern -->
    <property name="FILE_LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss} [%thread] [%logger{0}:%line] - %msg%n"/>

    <!--DiscordAppender 적용 -->
    <appender name="DISCORD"
              class="com.giggalpeople.backoffice.chatops.logback.appender.discord.append.DiscordAppender">
        <discordWebhookURL>${DISCORD_WEBHOOK_URI}</discordWebhookURL>
    </appender>

    <!-- Console appender 설정 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--     날짜       시간   로그레벨  로거이름  프로세스 ID  [로깅 발생 파일명]메소드 명,호출지 정보,(라인 수) 로그메세지 -->
            <pattern>[%d{yyyy-MM-dd}] [%d{HH:mm:ss.SSS}] [%p] ${PID:-} [%F] %M (%L\) : %m%n</pattern>
        </encoder>
    </appender>

    <!-- Log File 저장 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH_NAME}/${SERVER_NAME}.log</file>

        <!-- 출력패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH_NAME}/${LOG_FILE_NAME}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 에러의 경우 파일에 로그 처리 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <file>${LOG_PATH_NAME}/${ERR_LOG_FILE_NAME}-%d{yyyy-MM-dd}.%i.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->

            <fileNamePattern>${LOG_PATH_NAME}/${ERR_LOG_FILE_NAME}-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>180</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="ASYNC_DISCORD" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="DISCORD"/>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
    </appender>

    <!-- 모든 로그 출력 (콘솔/디코/파일) -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ASYNC_DISCORD"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

    <!-- 특정패키지 로깅레벨 설정 -->
    <logger name="org.hibernate.SQL" level="DEBUG" additivity="false">
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </logger>
</configuration>
