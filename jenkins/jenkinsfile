def SET_VARIABLE = "Jenkins File 변수 설정"
def SONARQUBE_ANALYSIS = "소나큐브 Analysis 확인"
def SONARQUBE_QUALITY_GATE = "소나큐브 Quality Gate 확인"
def APPLICATION_NAME = "total-back-office"

// git 환경 정보 가져오기
def get_commit_message() {  // git Commit Message 가져오기
    script {
        return sh(script: "git show -s --format=%B ${env.GIT_COMMIT}", returnStdout: true).trim()
    }
}

def get_commit_author() {   // git commit 작성자 가져오기
    script {
        return sh(script: "git --no-pager show -s --format=%an ${env.GIT_COMMIT}", returnStdout: true).trim()
    }
}

pipeline {
    agent any
    environment {
        DISCORD_WEBHOOK_URL = credentials("Total-Back-Office-BE-Discord-Webhook")
    }
    stages {
        stage(SET_VARIABLE) {
            steps {
                script {
                    // 구동 환경 설정 (삼항 연산자로 브런치 이름이 master라면 prod 환경이고, 아니면 dev 환경
                    def DRIVE_ENV = env.BRANCH_NAME.equals("master") ? "prod" : "dev"
                    // DRIVE_ENV DRIVE_ENV 변수를 다른 스테이지에서 참조할 수 있도록 환경 변수로 설정
                    env.DRIVE_ENV = DRIVE_ENV

                    APPLICATON_CREDENTIAL_NAME = DRIVE_ENV + APPLICATION_NAME + "-was"

                    // gitea 환경 설정
                    GITEA_CREDENTIAL_ID = "[기깔나는 사람들]gitea-backend"
                    GITEA_REPOSITORY_URL = "http://192.168.20.3:81/giggals-s-people/TotalBackOffice-BackEnd.git"

                    GIT_COMMIT_AUTHOR = get_commit_author()
                    GIT_COMMIT_MESSAGE = get_commit_message()

                    PR_ID = 'PR이 존재하지 않아요.'
                    PR_BRANCH = 'PR이 존재하지 않아요.'
                    if ("${GIT_COMMIT_MESSAGE}".contains('Merge')) {
                        PR_ID = "${GIT_COMMIT_MESSAGE}".substring("${GIT_COMMIT_MESSAGE}".indexOf('#') + 1, "${GIT_COMMIT_MESSAGE}".indexOf(')')).trim()
                        PR_BRANCH = "${GIT_COMMIT_MESSAGE}".split("from")[1].split("into")[0].trim()
                    }

                    // 소나큐브 설정
                    SONARQUBE_SERVER_NAME = 'SonarQube_BackEnd'
                    SONARQUBE_CREDENTIAL_ID = "backend-total-back-office"

                    // TEST Coverage Report Path
                    JUNIT_REPORT_PATH = "build/test-results/test"
                    JACOCO_REPORT_PATH = "build/jacoco/jacoco.xml"
                    CHECKSTYLE_REPORT_PATH = "build/reports/checkstyle-output/checkstyle-report.xml"

                    DISCORD_SEND_MESSAGE_TITLE = "기깔나는 사람들 통합 관리 서비스 무중단 배포"

                    DOCKER_SERVER_BASE_DIRECTORY = "/data/deploy/giggal-total-back-office"
                }
            }

            post {
                success {
                    sendStartAlarmToDiscord()
                }
            }
        } // stage(SET_VARIABLE) 끝

        stage('GITEA CHECKOUT') {
            steps {
                echo "Repository Clone 작업이 시작 되었어요 😀"

                git branch: "${env.BRANCH_NAME}",
                        credentialsId: GITEA_CREDENTIAL_ID,
                        url: GITEA_REPOSITORY_URL
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('GITEA CHECKOUT')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('GITEA CHECKOUT')
                }
            } // Discord Send Post 끝
        } // stage('GITEA CHECKOUT') 끝

        stage('Project Build 그리고 Test 작업') {
            steps {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    if (env.DRIVE_ENV == 'dev') {
                        echo '개발 환경 Project Build 그리고 Test 작업을 시작합니다!'
                        sh './gradlew clean build -Pspring.profiles.active=dev --stacktrace --warning-mode all --info'
                    } else {
                        echo '운영 환경 Project Build 그리고 Test 작업을 시작합니다!'
                        sh './gradlew clean build -Pspring.profiles.active=prod --stacktrace --warning-mode all --info'
                    }

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo 'Project Build 그리고 Test 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('Project Build 그리고 Test 작업')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('Project Build 그리고 Test 작업')
                }
            } // Discord Send Post 끝
        } // stage('Project Build 작업') 끝

        stage(SONARQUBE_ANALYSIS) {
            when {
                branch pattern: "(develop|master)", comparator: "REGEXP"
            }

            steps {
                script {
                    def scannerHome = tool 'SonarQube-Scanner'
                    withSonarQubeEnv(credentialsId: SONARQUBE_CREDENTIAL_ID, installationName: SONARQUBE_SERVER_NAME) {
                        sh "${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=BE-total-back-office \
                        -Dsonar.projectName=BE-total-back-office \
                        -Dsonar.branch.name=master \
                        -Dsonar.language=java \
                        -Dsonar.java.source=1.8 \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.test=src/test/java \
                        -Dsonar.test.inclusion=**/*Test.java \
                        -Dsonar.issuesReport.console.enable=true \
                        -Dsonar.junit.reportPaths=${JUNIT_REPORT_PATH} \
                        -Dsonar.java.binaries=build/classes \
                        -Dsonar.java.coveragePlugin=jacoco \
                        -Dsonar.coverage.jacoco.xmlReportPaths=${JACOCO_REPORT_PATH} \
                        -Dsonar.java.libraries.empty=true \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.java.checkstyle.reportPaths=${CHECKSTYLE_REPORT_PATH} \
                        -Dsonar.exclusions=**/dto/**,**/exception/**,**/constant/**,**/SpringInitProjectApplication.java,**/WebRestController.java,**/FileUploadYaml.java \
                        "
                    }
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord(SONARQUBE_ANALYSIS)
                    }
                }

                failure {
                    sendFailedAlarmToDiscord(SONARQUBE_ANALYSIS)
                }
            } // Discord Send Post 끝
        } // stage(SONARQUBE_ANALYSIS) 끝

        stage(SONARQUBE_QUALITY_GATE) {
            when {
                branch pattern: "(develop|master)", comparator: "REGEXP"
            }

            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                    script {
                        echo "소나큐브 Quality Gate 검사가 시작 되었어요!"
                        def sonarQubeQualityGate = waitForQualityGate()
                        def qualityGateStatus = sonarQubeQualityGate.status
                        echo "Quality Gate 상태: ${qualityGateStatus}"

                        if (qualityGateStatus != 'OK') {
                            echo "Quality Gate 검증 상태: ${qualityGateStatus}"
                            error "Quality Gate 검증에 실패 하였어요 😭: ${qualityGateStatus}"

                        } else {
                            echo "Quality Gate 검증에 성공 하였어요 😀: ${qualityGateStatus}"
                        }

                        echo "Quality Gate 검증을 모두 완료 하였어요 😎"
                    }
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord(SONARQUBE_QUALITY_GATE)
                    }
                }

                failure {
                    sendFailedAlarmToDiscord(SONARQUBE_QUALITY_GATE)
                }
            } // Discord Send Post 끝
        } // stage(SONARQUBE_QUALITY_GATE) 끝

        stage('개발 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여') {
            when {
                expression { env.GIT_BRANCH == 'develop' }
            }

            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    sshPublisher(
                            continueOnError: false, failOnError: true,

                            publishers: [
                                    sshPublisherDesc(
                                            configName: "op-management-api",
                                            verbose: true,
                                            transfers: [
                                                    sshTransfer(
                                                            remoteDirectory: "deploy/",
                                                            execCommand: "rm -rf *;"),
                                                    sshTransfer(
                                                            remoteDirectory: "deploy/dev/docker/",
                                                            sourceFiles: "build/libs/*.jar"),
                                                    sshTransfer(
                                                            sourceFiles: "deploy/dev/**",
                                                            execCommand: "chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/createDockerImageAndBackup.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/containerExistenceStatusCheck.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/application/applicationContainerNewRun.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/application/applicationHealthCheck.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/nginx/nginxDockerContainerRun.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/nginx/nginxBlueServiceSetting.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/nginx/nginxHealthCheck.sh"),
                                            ]
                                    )
                            ]
                    )

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo '개발 환경 Application 서버에 File 전달 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('개발 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('개발 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여')
                }
            } // Discord Send Post 끝
        } // stage('개발 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여') 끝

        stage('개발 환경 Docker Image 생성 및 Backup 작업') {
            when {
                expression { env.GIT_BRANCH == 'develop' }
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    sshPublisher(
                            continueOnError: false, failOnError: true,
                            publishers: [
                                    sshPublisherDesc(
                                            configName: "op-management-api",
                                            verbose: true,
                                            transfers: [
                                                    sshTransfer(execCommand: "$DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/createDockerImageAndBackup.sh")
                                            ]
                                    )
                            ]
                    )

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo '개발 환경 Docker Image 생성 및 Backup 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('개발 환경 Docker Image 생성 및 Backup 작업')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('개발 환경 Docker Image 생성 및 Backup 작업')
                }
            } // Discord Send Post 끝
        } // stage("개발 환경 Docker Image 생성 및 Backup 작업") 끝

        stage('개발 환경 Docker 관련 작업') {
            when {
                expression { env.GIT_BRANCH == 'develop' }
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    sshPublisher(
                            continueOnError: false, failOnError: true,
                            publishers: [
                                    sshPublisherDesc(
                                            configName: "op-management-api",
                                            verbose: true,
                                            transfers: [
                                                    sshTransfer(execCommand: "$DOCKER_SERVER_BASE_DIRECTORY/deploy/dev/shell-script/containerExistenceStatusCheck.sh")
                                            ]
                                    )
                            ]
                    )

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo '개발 환경 Docker 관련 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('개발 환경 Docker 관련 작업')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('개발 환경 Docker 관련 작업')
                }
            } // Discord Send Post 끝
        } // stage("개발 환경 Docker 관련 작업") 끝

        stage('운영 환경 WAS 서버에 File 전달 및 스크립트 실행 권한 부여') {
            when {
                expression { env.GIT_BRANCH == 'master' | env.GIT_BRANCH == 'main' }
            }

            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    sshPublisher(
                            continueOnError: false, failOnError: true,

                            publishers: [
                                    sshPublisherDesc(
                                            configName: "op-management-api",
                                            verbose: true,
                                            transfers: [
                                                    sshTransfer(
                                                            remoteDirectory: "deploy/",
                                                            execCommand: "rm -rf *;"),
                                                    sshTransfer(
                                                            remoteDirectory: "deploy/prod/was/docker/",
                                                            sourceFiles: "build/libs/*.jar"),
                                                    sshTransfer(
                                                            sourceFiles: "deploy/prod/was/**",
                                                            execCommand: "chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/createDockerImageAndBackup.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/containerExistenceStatusCheck.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/application/applicationContainerNewRun.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/application/applicationHealthCheck.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/nginx/nginxDockerContainerRun.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/nginx/nginxBlueServiceSetting.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/nginx/nginxGreenServiceSetting.sh; \
                                                                          chmod +x $DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/was/shell-script/nginx/nginxHealthCheck.sh"),
                                            ]
                                    )
                            ]
                    )

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo '운영 환경 Application 서버에 File 전달 및 스크립트 쓰기 권한 설정 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('운영 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('운영 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여')
                }
            } // Discord Send Post 끝
        } // stage('운영 환경 Application 서버에 File 전달 및 스크립트 실행 권한 부여') 끝

        stage('운영 환경 Docker Image 생성 및 Backup 작업') {
            when {
                expression { env.GIT_BRANCH == 'master' | env.GIT_BRANCH == 'main' }
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    sshPublisher(
                            continueOnError: false, failOnError: true,
                            publishers: [
                                    sshPublisherDesc(
                                            configName: "op-management-api",
                                            verbose: true,
                                            transfers: [
                                                    sshTransfer(execCommand: "$DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/shell-script/createDockerImageAndBackup.sh")
                                            ]
                                    )
                            ]
                    )

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo '운영 환경 Docker Image 생성 및 Backup 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('운영 환경 Docker Image 생성 및 Backup 작업')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('운영 환경 Docker Image 생성 및 Backup 작업')
                }
            } // Discord Send Post 끝
        } // stage("운영 환경 Application 서버 배포 작업") 끝

        stage('운영 환경 Docker 관련 작업') {
            when {
                expression { env.GIT_BRANCH == 'master' | env.GIT_BRANCH == 'main' }
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                script {
                    def startTimeMillis = System.currentTimeMillis()

                    sshPublisher(
                            continueOnError: false, failOnError: true,
                            publishers: [
                                    sshPublisherDesc(
                                            configName: "op-management-api",
                                            verbose: true,
                                            transfers: [
                                                    sshTransfer(execCommand: "$DOCKER_SERVER_BASE_DIRECTORY/deploy/prod/shell-script/containerExistenceStatusCheck.sh")
                                            ]
                                    )
                            ]
                    )

                    def endTimeMillis = System.currentTimeMillis()
                    def requiredTimeMillis = endTimeMillis - startTimeMillis
                    def requiredTimeSecond = requiredTimeMillis / 1000

                    echo '운영 환경 Docker 기동 작업 소요 시간 : ' + requiredTimeSecond + ' 초'
                }
            }

            post {
                success {
                    script {
                        sendSuccessAlarmToDiscord('운영 환경 Docker 관련 작업')
                    }
                }

                failure {
                    sendFailedAlarmToDiscord('운영 환경 Docker 관련 작업')
                }
            } // Discord Send Post 끝
        } // stage("운영 환경 Docker 관련 작업") 끝

        stage('Jenkins CI/CD 작업 완료') {
            steps {
                sh 'echo "Jenkins CI/CD 작업이 완료 되었어요. 😎"'
            }

            post {
                success {
                    sendEndSuccessAlarmToDiscord()
                }

                failure {
                    sendEndFailedAlarmToDiscord()
                }
            } // Discord Send Post 끝
        } // stage('Jenkins CI/CD 작업 완료') 끝
    } // stages 끝
}

void sendStartAlarmToDiscord() {
    discordSend(
            title: DISCORD_SEND_MESSAGE_TITLE,
            description: "${DRIVE_ENV} 환경 배포 작업 시작 합니다.",
            footer: "==============배포 작업 시작============\n\n"
                    + "통합 관리 WAS 배포 작업이 시작되었어요.\n"
                    + "${env.JOB_NAME}(${env.BUILD_NUMBER})\n\n"
                    + "Git Pull Request ID 정보 \n"
                    + "${PR_ID}\n\n"
                    + "Git Pull Request BRANCH 정보 \n"
                    + "${PR_BRANCH}\n\n"
                    + "Git COMMIT 유발자 정보 \n"
                    + "${GIT_COMMIT_AUTHOR}\n\n"
                    + "Git COMMIT Message \n"
                    + "${GIT_COMMIT_MESSAGE}\n\n"
                    + "Build URL 정보 \n\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendSuccessAlarmToDiscord(String stage) {
    discordSend(
            title: stage,
            description: stage + " 작업 성공했어요. 😀 ",
            footer: "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendSuccessAlarmAndRequiredTimeToDiscord(String stage, BigDecimal requiredTime) {
    discordSend(
            title: stage,
            description: stage + " 작업 성공했어요. 😀 \n " + "작업 소요 시간 : " + requiredTime + " 초",
            footer: "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendFailedAlarmToDiscord(String stage) {
    discordSend(
            title: stage,
            description: stage + " 작업 실패 했어요 😤",
            footer: "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendBuildSuccessAlarmToDiscord(String stage, String environment) {
    discordSend(
            title: environment + stage,
            description: environment + stage + " 작업 성공했어요. 😀 ",
            footer: "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendBuildFailedAlarmToDiscord(String stage, String environment) {
    discordSend(
            title: environment + stage,
            description: environment + stage + " 작업 실패 했어요 😤",
            footer: "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendEndSuccessAlarmToDiscord() {
    discordSend(
            title: DISCORD_SEND_MESSAGE_TITLE,
            description: "${DRIVE_ENV} 환경 배포 작업이 성공적으로 끝났어요.",
            footer: "==============배포 작업 끝============\n"
                    + "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}

void sendEndFailedAlarmToDiscord() {
    discordSend(
            title: DISCORD_SEND_MESSAGE_TITLE,
            description: "${DRIVE_ENV} 환경 배포 작업이 실패로 끝났어요.",
            footer: "==============배포 작업 끝============\n"
                    + "ⓒ 2023. 기깔나는 사람들(giggals.pepole@gmail.com) All Rights Reserved. Blog : https://giggal-people.tistory.com/\n\n",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            webhookURL: DISCORD_WEBHOOK_URL
    )
}